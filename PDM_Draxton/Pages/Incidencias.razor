@page "/incidencias/"
@page "/incidencias/{idNegocio}/{idPeriodoNegocio}"

@layout MainLayout
@inherits PDM_Draxton.Pages.IncidenciasComponent

@using PDM_Draxton.Data
@using PDM_Draxton.Models

@using Radzen
@using Radzen.Blazor
@using Blazor.Models.Sample
@using System.Globalization;

@using PDM_Draxton.Services
@using System.Data
@inject IdentityInformation _identity;

<PageTitle>Incidencias</PageTitle>

@if (_identity.IsAuthenticated)
{
    var identity = _identity.IdNegocio;

    <RadzenContent Container="main">
        <ChildContent>
            <RadzenHeading Size="H2" Text="Incidencias">
            </RadzenHeading>
            <div class="row">
                <div class="col-md-12 justify-content-ini d-flex" style="display: inline-block" >
                    <RadzenLabel Text="Negocio:   " Style="margin-top: 10px" Component="Dropdown0"/>
                    <RadzenDropDown Data="@INegocio" @bind-Value=@IdNegocio Disabled=@deshabilitado style="height: 35px; margin-left: 10px; margin-right: 10px; margin-bottom:10px;" 
                    TextProperty="Descripcion" Placeholder="Seleccione..." AllowClear="true" AllowFiltering="true"
                    ValueProperty="Id" Name="Dropdown0" TValue="string" Change=@(cons_Observaciones)/>
                     @*Change=@(args => cons_Negocio_by_id(args))>*@
                    <RadzenLabel Text="Periodo:" Style="margin-top: 10px" />

                    <RadzenDatePicker DateFormat="MMMM-yyyy" @bind-Value=@periodo style="height: 37px; margin-left: 10px; margin-right: 10px" 
                     Name="Datepicker0" TValue="DateTime" Change=@(cons_Observaciones)/>
             
                </div>
            </div>
            <div style="height: 100%" class="row">
                <div class="col-md-6">
                    <RadzenCard style="height: 100%">
                        <ChildContent>
                            <div class="row">
                                <div class="col-md-12 justify-content-end d-flex">
                                    <RadzenLabel Component="checkbox0" style="width: 41.86249923706055px" Text="Todas">
                                    </RadzenLabel>
                                    <RadzenCheckBox @bind-Value=@checkTodas Change=@(cons_Todas) style="margin-bottom: 5px; margin-left: 5px; margin-right: 5px" TriState="false" Name="Checkbox0" TValue="bool">
                                    </RadzenCheckBox>
                                    <RadzenLabel Component="checkbox1"  style="position: static; width: 116px" Text="Sin Observaciones">
                                    </RadzenLabel>
                                    <RadzenCheckBox @bind-Value=@checkSinObs Change=@(cons_SinObs) style="margin-bottom: 5px; margin-left: 5px; margin-right: 5px" TriState="false" Name="Checkbox1" TValue="bool">
                                    </RadzenCheckBox>
                                    <RadzenLabel Component="checkbox2"  style="position: static; width: 116px" Text="Con Observaciones">
                                    </RadzenLabel>
                                    <RadzenCheckBox @bind-Value=@checkConObs Change=@(cons_ConObs) style="margin-bottom: 5px; margin-left: 5px; margin-right: 5px" TriState="false" Name="Checkbox2" TValue="bool">
                                    </RadzenCheckBox>
                                </div>
                            </div>
                            <RadzenDataGrid @ref="grid0" AllowPaging="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                PageSize="10" AllowSorting="true" ColumnWidth="0px" Data="@IIncidencias" 
                                FilterMode="Radzen.FilterMode.Advanced" TItem="PDM_Draxton.Models.Incidencia"
                                  RowSelect="@Grid0RowSelect">
                                 @*RowSelect="@((args) =>grIncidencias_RowSelect(args))">*@
                                  
                                <Columns>
                                    <RadzenDataGridColumn TItem="PDM_Draxton.Models.Incidencia" Visible = "false" Property="Id" Title="Pedimento"  Width="0px">
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="PDM_Draxton.Models.Incidencia" Property="Pedimento" Title="Pedimento"  Width="115px">
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="PDM_Draxton.Models.Incidencia" Property="NumeroFactura" Title="Numero Factura"  Width="200px">
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="PDM_Draxton.Models.Incidencia" Property="FechaFacturacion" Title="Fecha Facturacion" Width="100px">
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="PDM_Draxton.Models.Incidencia" Property="Proveedor" Title="Proveedor"  Width="170px" >
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="PDM_Draxton.Models.Incidencia" TextAlign="TextAlign.Right" Property="Total" Title="Total"  Width="150px">                                   
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="PDM_Draxton.Models.Incidencia" Property="Estatus" Title="Estatus"  Width="150px">                                   
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="PDM_Draxton.Models.Incidencia" Visible = "false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Title="Validado" Width="70px">                                   
                                    </RadzenDataGridColumn>
                                </Columns>
                            </RadzenDataGrid>
                        </ChildContent>
                    </RadzenCard>
                </div>
                <div class="col-md-6">
                    <RadzenCard style="height: 100%">
                        <ChildContent>
                            <RadzenTabs style="border: 1px solid #000000; height: 313.3999938964844px">
                                <Tabs>
                                    <RadzenTabsItem Disabled="false" Icon="speaker_notes" Text="Observaciones:">
                                        <ChildContent>
                                            <RadzenPanel style="display: inline-block; height: 218px; width: 100%">
                                                <ChildContent>

                                                @if (lObservaciones != null)
                                                {
                                                    @foreach (var tmpObs in lObservaciones)
                                                    {
                                                        <RadzenTextArea Disabled = "true" style="height: 100px; width: 100%" Value="@tmpObs.Descripcion" Name="@tmpObs.Id.ToString()">
                                                        </RadzenTextArea>
                                                    }
                                                }
                                                </ChildContent>
                                            </RadzenPanel>
                                        </ChildContent>
                                    </RadzenTabsItem>
                                </Tabs>
                            </RadzenTabs>
                             <RadzenTemplateForm TItem="Observaciones" Data=@model Submit="@((args) =>Agregar_click(idIncidencia))">
                            <div style="margin-top: 15px" class="row">
                                <div class="col-md-3">
                                    <RadzenLabel style="margin-top: 15px" Text="Nueva Observación:">
                                    </RadzenLabel>
                                </div>
                                <div class="col-md-9">
                                    <RadzenTextArea Disabled=@deshabComentario style="margin-top: 15px; width: 100%" Name="txtNuevaObservacion" @bind-Value="@s_observacion"
                                            MaxLength="500">
                                    </RadzenTextArea>
                                          <RadzenRequiredValidator Component="txtNuevaObservacion" Text="Agregar comentario" />
                                </div>
                                <div class="col-md-12" style="text-align: right">
                                    <RadzenButton Icon="feedback" Disabled=@deshabComentario style="margin-bottom: 10px; margin-top: 10px; text-align: center" 
                                        Text="Agregar" ButtonType="ButtonType.Submit">
                                    </RadzenButton>
                                </div>
                            </div>
                            </RadzenTemplateForm>
                        </ChildContent>
                    </RadzenCard>
                </div>
            </div>
        </ChildContent>
    </RadzenContent>
}
@if (!_identity.IsAuthenticated)
       { 
            <p>Usuario Verificado: @_identity.IsAuthenticated</p>
            <p>Usuario: @(_identity.Name ?? "")</p>
            <p>Email: @(_identity.Email ?? "correo no disponible")</p>
            <h2>"El usuario no es esta Autorizado para esta pantalla"</h2>
       }


@code {

    Boolean boolProcess;

    bool checkTodas = true;
    bool checkSinObs = false;
    bool checkConObs = false;

    private string s_observacion = String.Empty;
    private IEnumerable<Incidencia> IIncidencias;
    private IEnumerable<Negocio> INegocio;

    private IEnumerable<Observaciones> ?Iobservaciones;

    Observaciones model = new Observaciones();

    DateTime periodo;
    //string ?IdNegocio;

    [Parameter]
    public string? IdNegocio{ get; set; }

    [Parameter]
    public string? idPeriodoNegocio { get; set; }

    int idUsuario;
    public bool deshabilitado = false;
    public bool deshabComentario = false;
    DataAccess da = new DataAccess();

    protected override async Task OnInitializedAsync()
    {
        Thread.CurrentThread.CurrentCulture = new CultureInfo("es-MX");
        Thread.CurrentThread.CurrentUICulture = new CultureInfo("es-MX");

        idUsuario = _identity.IdUsuario;
        //idPeriodoNegocio = _identity.DashIdPeriodoNegocio.ToString();
        //IdNegocio = _identity.DashIdNegocio.ToString();

        if (idPeriodoNegocio != "0")
        {
            if (IdNegocio == "0")
                IdNegocio = null;

            if (da.cons_incidencias(1, IdNegocio, idPeriodoNegocio, idUsuario, periodo.ToString("MMMM-yyyy"), out List<Incidencia> incTmp, out String msgErrorInc))
            {
                IIncidencias = incTmp;

                //Deshabilita area y boton si periodo esta cerrado
                if(incTmp.Count>0)
                if ((incTmp[0].EstatusPeriodoNegocio == "CERRADO" || incTmp[0].EstatusPeriodoNegocio == "INCIDENCIAS"))
                    deshabComentario = true;
                else
                    deshabComentario = false;
            }
            try
            {
                periodo = Convert.ToDateTime(incTmp[0].FechaFacturacion);
            }
            catch { periodo = Convert.ToDateTime(da.cons_PeriodoNombre(idPeriodoNegocio)); }
        }
        else
        {
            periodo = DateTime.Today;

            IdNegocio = _identity.IdNegocio.ToString();

            //     idPeriodoNegocio = _identity.DashIdPeriodoNegocio.ToString();

            if (IdNegocio == "0")
                IdNegocio = null;

            if (da.cons_incidencias(1, IdNegocio, idPeriodoNegocio, idUsuario, periodo.ToString("MMMM-yyyy"), out List<Incidencia> incTmp, out String msgErrorInc))
            {
                IIncidencias = incTmp;
                if(incTmp.Count>0)
                if ((incTmp[0].EstatusPeriodoNegocio == "CERRADO" || incTmp[0].EstatusPeriodoNegocio == "INCIDENCIAS"))
                    deshabComentario = true;
                else
                    deshabComentario = false;
            }

        }
        
        if (da.cons_Negocio(out List<Negocio> negTmp, out String msgErrorNeg))
        {
            INegocio = negTmp;
        }

        @if (_identity.Rol == "Negocio")
        {
            deshabilitado = true;
        }
        else { deshabilitado = false; }


    }

    public async void cons_SinObs()
    {
        //Sin Observaciones
        checkSinObs = true;
        checkTodas = false;
        checkConObs = false;

        if (da.cons_incidencias(2, IdNegocio, idPeriodoNegocio,idUsuario,periodo.ToString("MMMM-yyyy"), out List<Incidencia> incTmp, out String msgErrorInc))
        {
            IIncidencias = incTmp;
            lObservaciones = null;
        }
    }

    public async void cons_Todas()
    {
        //
        checkSinObs = false;
        checkTodas = true;
        checkConObs = false;

        if (da.cons_incidencias(1, IdNegocio, idPeriodoNegocio, idUsuario, periodo.ToString("MMMM-yyyy"), out List<Incidencia> incTmp, out String msgErrorInc))
        {
            IIncidencias = incTmp;
            lObservaciones = null;
        }
    }

    public async void cons_ConObs()
    {
        //
        checkConObs = true;
        checkSinObs = false;
        checkTodas = false;

        if (da.cons_incidencias(3, IdNegocio, idPeriodoNegocio, idUsuario, periodo.ToString("MMMM-yyyy"), out List<Incidencia> incTmp, out String msgErrorInc))
        {
            IIncidencias = incTmp;
            lObservaciones = null;
        }
    }


    public async void cons_Observaciones()
    {
        DataAccess da = new DataAccess();
        checkSinObs = false;
        checkTodas = true;
        checkConObs = false;
        try
        {
            if (da.cons_incidencias(1,IdNegocio,null,idUsuario, periodo.ToString("MMMM-yyyy"),out List<PDM_Draxton.Models.Incidencia> incTmp, out String msgErrorInc))
            {
                IIncidencias = incTmp;
            }
        }
        catch { }
    }

    protected async Task Agregar_click(int idIncidencia)
    {
        int idUsuario = _identity.IdUsuario;
        if (idIncidencia == 0)
            return;
        if (s_observacion.Trim().Length == 0)
            return;
        try
        {
            DataAccess da = new DataAccess();

            if (!da.InsertarObservacion(idIncidencia, s_observacion, idUsuario, out DataTable dt, out String msgErrorNeg))
            {
                boolProcess = false;
            }
            else
            {
                s_observacion = "";
            }

            if (da.cons_observaciones_by_id(idIncidencia, out List<Observaciones> incObs, out String msgError))
            {
                lObservaciones = incObs;
            }
            
        }
        catch (System.Exception e)
        {

        }
    }

}