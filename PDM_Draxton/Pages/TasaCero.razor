@page "/tasa-cero"

@layout MainLayout
@inherits PDM_Draxton.Pages.TasaCeroComponent
@using PDM_Draxton.Services;
@inject IdentityInformation _identity;


@using PDM_Draxton.Data
@using PDM_Draxton.Models
@using PDM_Draxton.utilidades
@using Radzen
@using Radzen.Blazor
@using Blazor.Models.Sample
@using System.IO
@using System.Text.RegularExpressions
@using System.Data
@using System.Reflection

@inject Microsoft.Extensions.Localization.IStringLocalizer<TasaCero> L

<PageTitle>Facturas</PageTitle>

@if (_identity.IsAuthenticated)
{
    <RadzenContent Container="main">
        <ChildContent>
@*            <RadzenHeading Size="H2" Text="Facturas">
            </RadzenHeading>*@
            <div class="row justify-content-between">

                <div class="col-md-7">
                        <h2>Facturas</h2>                  
                </div>    

                <div class="col-md-5 justify-content-end d-flex">
                    <RadzenLabel style="margin-bottom: fpx; margin-left: 5px; margin-right: 5px; margin-top: 10px" Text="Negocio:">
                    </RadzenLabel>

                    <RadzenDropDown Id="cbNegocio" Data="@INegocio"  @bind-Value=IdNegocio  Disabled=@deshabilitado TextProperty="Descripcion" ValueProperty="Id" Placeholder="Seleccione..."
                            AllowClear="true" AllowFiltering="true" Name="cbNegocio" TValue="string" Change=@(cons_Tasa0)>
                    </RadzenDropDown>
                    @*Change=@(args => cons_Negocio_by_id(args))>*@
                    <RadzenLabel style="margin-bottom: fpx; margin-left: 5px; margin-right: 5px; margin-top: 10px" Text="Periodo:">
                    </RadzenLabel>
                    <RadzenDatePicker DateFormat="MMMM-yyyy" @bind-Value=periodo style="margin-left: 5px; margin-right: 15px" Name="Datepicker0" 
                            TValue="DateTime" Change=@(cons_Tasa0)>
                    </RadzenDatePicker>
                </div>
            </div>

            <RadzenTabs @bind-SelectedIndex=@selectedIndex Change=@OnChange RenderMode="TabRenderMode.Server" style="height: 561px; width: 100%">
                <Tabs>
                    <RadzenTabsItem Icon="receipt" Selected="true" Text="Pedimentos">
                        <ChildContent>
                            <RadzenDataGrid AllowPaging="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" 
                                      PageSize="10" AllowSorting="true" ColumnWidth="150px" Data="@tasaCero" FilterMode="Radzen.FilterMode.Advanced" TItem="cTasaCero"
                                      RowSelect="@Grid0RowSelect">
                                <Columns>
                                    <RadzenDataGridColumn TItem="cTasaCero" Property="UUID" Title="UUID" Visible="true" Width="20%">
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="cTasaCero" Property="Folio" Title="Folio" Width="15%">
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="cTasaCero" Property="rfcReceptor" Title="Receptor" Width="25%">
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="cTasaCero" TextAlign="TextAlign.Right" Property="totalFactura" Title="Total" Width="20%">
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="cTasaCero" Property="EstatusCFDI" Title="Estatus" Width="20%">
                                    </RadzenDataGridColumn>
                                </Columns>
                            </RadzenDataGrid>
                        </ChildContent>
                    </RadzenTabsItem>
                    <RadzenTabsItem Icon="code" Selected="false" Text="Ver XML" >
                        <ChildContent>
                            <RadzenTextArea style="height: 410px; width: 100%" Disabled="true" @bind-Value=@xml_doc>
                            </RadzenTextArea>
                            <div style="text-align: center" class="row">
                                <div class="col-md-12" style="text-align: right">                                
                                    <RadzenButton style="display: inline; margin-bottom: 4px; margin-top: 4px; text-align: right" Click=@(ButtonDescargar_click) Text="Descargar">
                                    </RadzenButton>
                                    @*<a href="Timbrado.xml" download="PDM_Draxton\\Timbrado.xml">Download XML</a>*@
                                     @*<a href="Timbrado.xml"/>*@
                                </div>
                            </div>
                        </ChildContent>
                    </RadzenTabsItem>
                </Tabs>
            </RadzenTabs>
        </ChildContent>
    </RadzenContent>
}
@if (!_identity.IsAuthenticated)
       { 
            <p>Usuario Verificado: @_identity.IsAuthenticated</p>
            <p>Usuario: @(_identity.Name ?? "")</p>
            <p>Email: @(_identity.Email ?? "correo no disponible")</p>
            <h2>"El usuario no es esta Autorizado para esta pantalla"</h2>
       }

@code {

    private string rutaArchivo = String.Empty;

    string ?IdNegocio;
    DateTime periodo;
    string ?msgError;
    string? fileName;

    bool isValid;
    int IdUsuario;

    static IConfigurationBuilder configBuilder = new ConfigurationBuilder().AddJsonFile("appsettings.json");
    IConfiguration configuration = configBuilder.Build();

    private IWebHostEnvironment environment;

    private IEnumerable<Negocio> ?INegocio;
    private IEnumerable<cTasaCero> ?tasaCero;

    //Negocio model = new Negocio();
    cDataStage datastage = new cDataStage();

    private string value;

    private static List<cDataStage> ?lista { get; set; }
    bool deshabilitado = false;

    int progress;
    string info;

    protected override async Task OnInitializedAsync()
    {

        periodo = DateTime.Today;
        IdNegocio = _identity.IdNegocio.ToString();
        IdUsuario = _identity.IdUsuario;

        DataAccess da = new DataAccess();

        if(IdNegocio == "0") 
            IdNegocio = da.cons_NegocioTodos().ToString();

        if (da.cons_Negocio(out List<Negocio> negTmp, out String msgErrorNeg))
        {
            INegocio = negTmp;
        }

        @if (_identity.Rol == "Negocio")
        {
            deshabilitado = true;
        }
        else { deshabilitado = false; }

    cons_Tasa0();

    }

    int selectedIndex = 0;


    void OnChange(int index)
    {
        selectedIndex = index;
    }


    public void cons_Tasa0()
    {

        DataAccess da = new DataAccess();

        try
        {
            if (da.consultaTasaCero(IdNegocio, periodo, out List<cTasaCero> lista, out String msgError))
            {
                tasaCero = lista;

                OnChange(0);
            }
        }
        catch
        {}
    }

    public void LeerArchivo()
    {
        if(IdNegocio ==null || IdNegocio == "23")
        {
            msgError = "Seleccione un Negocio";
            return;
        }
        if (fileName == null)
        {
            msgError = "Seleccione un archivo a cargar";
            return;
        }

        msgError = "";


        if (!isValid)
        {
            msgError = "Error al cargar el archivo, no tiene el formato correcto.";
            return;
        }

        DataAccess da = new DataAccess();

        try
        {
            ListtoDataTableConverter converter = new ListtoDataTableConverter();
            DataTable dt = converter.ToDataTable(lista);

            if (da.ins_DataStage(IdUsuario,IdNegocio, fileName, dt, out msgError))
            {
                UriHelper.NavigateTo("pedimentos");
              //  Inegocio = negocioTmp;
            }
            //else
            //    msgError = "Error al cargar el archivo";
        }

        catch
        {
            isValid = false;
            msgError = "Error al cargar el archivo";
            return;
        }

    }
}
