@page "/correo"
@page "/correo/{IdPeriodo}/{IdNegocio}/{Estatus}/{Negocio}/{DocsTotales}/{Incidencias}/{Activas}/{DescPeriodo}"
@layout MainLayout
@inherits PDM_Draxton.Pages.CorreoComponent
@using dll_Gis;

@using PDM_Draxton.Data
@using PDM_Draxton.Services;
@using PDM_Draxton.utilidades
@using Radzen
@using Radzen.Blazor
@using Blazor.Models.Sample
@inject Microsoft.Extensions.Localization.IStringLocalizer<Correo> L
@inject DialogService DialogService
@inject IModalService modal
@inject IdentityInformation _identity
@inject NavigationManager _navigationManager


<RadzenContent Container="main">
  <ChildContent>
    <RadzenHeading Size="H1" Text="Correo">
    </RadzenHeading>
    <div class="row">
      <div class="col-md-12" style="display: inline-block">
        @if (_identity.Rol != "Negocio")
            {
                <RadzenLabel style="width: 400.38751220703125px" Text="Se enviará un correo informando el cierre del periodo">
                </RadzenLabel>
            }
            else
            {
                <RadzenLabel style="width: 450.38751220703125px" Text="Se enviará un correo solicitando la revisión por parte de Comercio Exterior">
                </RadzenLabel>
            }
            <RadzenLabel style="font-weight: bold;margin-top:10px" Text="Adjuntar comentarios e incidencias generadas"></RadzenLabel>

        <div class="row">
          <div class="col-md-12">
            <RadzenTextArea style="margin-top: 15px; width: 100%" Name="Textarea0" @bind-Value="@s_observacion" MaxLength="500">
            </RadzenTextArea>
          </div>
        </div>
        <div class="row">
          <div class="col-md-12" style="text-align: center">
            <RadzenButton Click="@Enviar" Icon="email" IsBusy="false" Text="Enviar">
            </RadzenButton>
                        <RadzenButton Click="@Cancelar" IsBusy="false" Text="Cancelar">
            </RadzenButton>
          </div>
        </div>
      </div>
    </div>
  </ChildContent>
</RadzenContent>

@code{
    private string cambioEstatus;
    private string msgAsuntoMail;
    private string Archivo = String.Empty;
    private string user = String.Empty;
    private string email = String.Empty;
    private string s_observacion = String.Empty;

    [Parameter]
    public int? IdPeriodo { get; set; }

    [Parameter]
    public int IdNegocio { get; set; }

    [Parameter]
    public string Estatus { get; set; }

    [Parameter]
    public string DescPeriodo { get; set; }

    [Parameter]								  
    public string Negocio { get; set; }

    [Parameter]
    public int DocsTotales { get; set; }

    [Parameter]
    public int Incidencias { get; set; }

    [Parameter]
    public int Activas { get; set; }

    [Parameter]
    public string fecha { get; set; }		


    DataAccess da = new DataAccess();

    private bool? ckAduntarComentarios = true;
    private bool habilitarComentario = false;
    private string? comentario;
    string destinatarios = String.Empty;

    public void Cancelar()
    {
        DialogService.Close(true);
        return;
    }

    public void Enviar()
    {
        destinatarios = da.cons_Destinatarios(_identity.IdUsuario, IdNegocio, cambioEstatus);

        if (_identity.Rol  == "Negocio")
        {
            cambioEstatus = "COMERCIO";
            msgAsuntoMail = "Periodo En Revisión por Comercio Exterior";
            destinatarios = da.cons_Destinatarios(_identity.IdUsuario, IdNegocio, cambioEstatus);
            enviaMail();
        }
        else
        {

            if (IdPeriodo == null)
            {
                msgAsuntoMail = "Se Informará al Negocio de la carga del Archivo";
                enviaMail();
            }
            else
            {
                cambioEstatus = "CERRADO";
                msgAsuntoMail = "Periodo Cerrado";
                enviaMail();
            }

        }        

    }

    public void enviaMail()
    {
        Email correo = new Email();
        try
        {
            dll_Gis.Funciones fn = new dll_Gis.Funciones();

            //correo.enviaCorreo("prueba", "prueba", "francisco.nuncio@servicioexterno.com.mx", out String msgError);
             if (!correo.enviaCorreo(cambioEstatus,Archivo,user, email,Negocio, DocsTotales, Incidencias, Activas, Estatus, fecha, 
                 msgAsuntoMail, destinatarios,s_observacion,DescPeriodo,out string msgError))
            {
                DialogService.Alert("Error al enviar el correo", "Aviso", new AlertOptions() { OkButtonText = "OK" });
                DialogService.Close(true);
                return;
            }

            if (IdPeriodo == null)
            {
                DialogService.Close(true);
                return;
            }

                DataAccess da = new DataAccess();

            if (da.upd_EstatusPeriodoNegocio(IdPeriodo, IdNegocio, cambioEstatus, out String msgErrorInc))
            {
                DialogService.Close(true);
               // UriHelper.NavigateTo("/PDM_Draxton/dash-board");
                @if (_identity.Rol == "Negocio")
                    DialogService.Alert("Periodo enviado a revisión", "Aviso", new AlertOptions() { OkButtonText = "OK" });
                else
                    DialogService.Alert("Periodo cerrado correctamente", "Aviso", new AlertOptions() { OkButtonText = "OK" });

            }
            DialogService.Close(true);

        }
        catch (Exception e)
        {
            var msg = e.Message;

        }
    }
}